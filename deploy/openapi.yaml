openapi: 3.1.0
info:
  title: EC2 Shell Executor
  version: 1.0.0
  description: Execute shell commands on a remote EC2 instance securely.
servers:
  - url: https://${YOUR_DOMAIN}
paths:
  /transfer:
    post:
      operationId: transferFile
      summary: Process files sent by the GPT
      description: Accepts files from the user and stores them on the server.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                openaiFileIdRefs:
                  type: array
                  description: Files to store. May include up to 10 elements.
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      id:
                        type: string
                      mime_type:
                        type: string
                      download_link:
                        type: string
                        format: uri
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  urls:
                    type: array
                    items:
                      type: string
                      format: uri

  /download:
    get:
      operationId: getFile
      summary: Retrieve a previously uploaded file
      description: Returns a file from the output directory
      parameters:
        - name: filename
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  openaiFileResponse:
                    type: array
                    items:
                      type: string
                      format: uri

  /execute:
    post:
      x-openai-isConsequential: false
      operationId: runCommand
      summary: Execute a shell command
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $${q}ref: '#/components/schemas/CommandRequest'
      responses:
        '200':
          description: Command execution result
          content:
            application/json:
              schema:
                $${q}ref: '#/components/schemas/CommandResponse'

  /tmux/{session}:
    get:
      x-openai-isConsequential: false
      operationId: read_tmux_buffer
      summary: Read tmux buffer
      security:
        - bearerAuth: []
      parameters:
        - name: session
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful read
        '404':
          description: Session not found

  /tmux/{session}/send:
    post:
      x-openai-isConsequential: false
      operationId: send_tmux_keys
      summary: Send input to tmux session and reads the tmux_buffer
      security:
        - bearerAuth: []
      parameters:
        - name: session
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                input:
                  type: array
                  items:
                    type: string
              required:
                - input
              description: List of key strings to send to tmux (e.g., ["Escape", ":q", "Enter"] to exit vim, ["C-x"] to exit nano or ["Up", "Enter"] to run the previous command). In the rare case you need a key name literally, split them up (e.g. ["Esca", "pe"] instead of ["Escape"]).
      responses:
        '200':
          description: Input sent
        '404':
          description: Session not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    CommandRequest:
      type: object
      properties:
        command:
          type: string
          description: The shell command to execute
      required:
        - command
    CommandResponse:
      type: object
      properties:
        stdout:
          type: string
          description: Standard output from the command
        stderr:
          type: string
          description: Standard error from the command
        exit_code:
          type: integer
          description: Exit code of the command
